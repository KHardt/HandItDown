// <auto-generated />
using System;
using HandItDown.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HandItDown.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181214203356_FinalPivot")]
    partial class FinalPivot
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HandItDown.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "49701908-4d23-499c-ae1a-e0b2fca303a0", AccessFailedCount = 0, ConcurrencyStamp = "423d3e92-61d7-4a16-9ca8-9f1e833ad8e7", Email = "admin@admin.com", EmailConfirmed = true, FirstName = "admin", LastName = "admin", LockoutEnabled = false, NormalizedEmail = "ADMIN@ADMIN.COM", NormalizedUserName = "ADMIN@ADMIN.COM", PasswordHash = "AQAAAAEAACcQAAAAEL4a2PwhNNcVjYP2PHXC9u8XSufjRfqwrPtSrEGVsW11arbdHtY2j3zxJBt2w3DI7g==", PhoneNumberConfirmed = false, SecurityStamp = "bc6f26fe-4067-49bb-a048-d9c6411749dc", TwoFactorEnabled = false, UserName = "admin@admin.com" }
                    );
                });

            modelBuilder.Entity("HandItDown.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired();

                    b.Property<int>("Quantity");

                    b.Property<int>("StatusId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("BookId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Book");

                    b.HasData(
                        new { BookId = 1, Author = "Tag", Quantity = 1, StatusId = 1, Title = "Me", UserId = "49701908-4d23-499c-ae1a-e0b2fca303a0" },
                        new { BookId = 2, Author = "Tag", Quantity = 1, StatusId = 1, Title = "Me", UserId = "49701908-4d23-499c-ae1a-e0b2fca303a0" },
                        new { BookId = 3, Author = "Tag", Quantity = 2, StatusId = 1, Title = "Me", UserId = "49701908-4d23-499c-ae1a-e0b2fca303a0" }
                    );
                });

            modelBuilder.Entity("HandItDown.Models.Clothing", b =>
                {
                    b.Property<int>("ClothingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClothingTypeId");

                    b.Property<int>("Color");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ImagePath");

                    b.Property<int>("Quantity");

                    b.Property<int>("Size");

                    b.Property<int>("StatusId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ClothingId");

                    b.HasIndex("ClothingTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Clothing");

                    b.HasData(
                        new { ClothingId = 1, ClothingTypeId = 1, Color = 0, Description = "", Quantity = 50, Size = 0, StatusId = 1, UserId = "49701908-4d23-499c-ae1a-e0b2fca303a0" },
                        new { ClothingId = 2, ClothingTypeId = 1, Color = 0, Description = "", Quantity = 50, Size = 0, StatusId = 1, UserId = "49701908-4d23-499c-ae1a-e0b2fca303a0" },
                        new { ClothingId = 3, ClothingTypeId = 2, Color = 0, Description = "", Quantity = 50, Size = 0, StatusId = 1, UserId = "49701908-4d23-499c-ae1a-e0b2fca303a0" }
                    );
                });

            modelBuilder.Entity("HandItDown.Models.ClothingType", b =>
                {
                    b.Property<int>("ClothingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ClothingTypeId");

                    b.ToTable("ClothingType");

                    b.HasData(
                        new { ClothingTypeId = 1, Label = "Shirts" },
                        new { ClothingTypeId = 2, Label = "Pants" },
                        new { ClothingTypeId = 3, Label = "Shorts" },
                        new { ClothingTypeId = 4, Label = "Socks" },
                        new { ClothingTypeId = 5, Label = "Sweaters" },
                        new { ClothingTypeId = 6, Label = "Shoes" },
                        new { ClothingTypeId = 7, Label = "Hats" },
                        new { ClothingTypeId = 8, Label = "Jackets" },
                        new { ClothingTypeId = 9, Label = "Misc" }
                    );
                });

            modelBuilder.Entity("HandItDown.Models.Misc", b =>
                {
                    b.Property<int>("MiscId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ImagePath");

                    b.Property<int>("Quantity");

                    b.Property<int>("StatusId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("MiscId");

                    b.ToTable("Misc");

                    b.HasData(
                        new { MiscId = 1, Description = "", Quantity = 1, StatusId = 1, UserId = "49701908-4d23-499c-ae1a-e0b2fca303a0" }
                    );
                });

            modelBuilder.Entity("HandItDown.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label")
                        .IsRequired();

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new { StatusId = 1, Label = "Has" },
                        new { StatusId = 2, Label = "Needs" },
                        new { StatusId = 3, Label = "Donatable" }
                    );
                });

            modelBuilder.Entity("HandItDown.Models.Toy", b =>
                {
                    b.Property<int>("ToyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ImagePath");

                    b.Property<int>("Quantity");

                    b.Property<int>("StatusId");

                    b.Property<int>("ToyTypeId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ToyId");

                    b.HasIndex("StatusId");

                    b.HasIndex("ToyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Toy");

                    b.HasData(
                        new { ToyId = 1, Description = "", Quantity = 1, StatusId = 1, ToyTypeId = 1, UserId = "49701908-4d23-499c-ae1a-e0b2fca303a0" },
                        new { ToyId = 2, Description = "", Quantity = 1, StatusId = 1, ToyTypeId = 3, UserId = "49701908-4d23-499c-ae1a-e0b2fca303a0" },
                        new { ToyId = 3, Description = "", Quantity = 1, StatusId = 1, ToyTypeId = 2, UserId = "49701908-4d23-499c-ae1a-e0b2fca303a0" }
                    );
                });

            modelBuilder.Entity("HandItDown.Models.ToyType", b =>
                {
                    b.Property<int>("ToyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ToyTypeId");

                    b.ToTable("ToyType");

                    b.HasData(
                        new { ToyTypeId = 1, Label = "Cars and Trucks" },
                        new { ToyTypeId = 2, Label = "Games and Puzzles" },
                        new { ToyTypeId = 3, Label = "Slides and outdoor things" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HandItDown.Models.Book", b =>
                {
                    b.HasOne("HandItDown.Models.Status", "Status")
                        .WithMany("Books")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HandItDown.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HandItDown.Models.Clothing", b =>
                {
                    b.HasOne("HandItDown.Models.ClothingType", "ClothingType")
                        .WithMany("Clothing")
                        .HasForeignKey("ClothingTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HandItDown.Models.Status", "Status")
                        .WithMany("Clothing")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HandItDown.Models.ApplicationUser", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HandItDown.Models.Toy", b =>
                {
                    b.HasOne("HandItDown.Models.Status", "Status")
                        .WithMany("Toys")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HandItDown.Models.ToyType", "ToyType")
                        .WithMany("Toys")
                        .HasForeignKey("ToyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HandItDown.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HandItDown.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HandItDown.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HandItDown.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HandItDown.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
